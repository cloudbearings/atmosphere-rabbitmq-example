<web-app xmlns="http://java.sun.com/xml/ns/javaee"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
      version="3.0"> 


	<description>Atmosphere Spike</description>
    <display-name>Atmosphere Spike</display-name>
    
	<!-- Java-based Spring container definition -->
	<context-param>
    	<param-name>contextClass</param-name>
    	<param-value>org.springframework.web.context.support.AnnotationConfigWebApplicationContext</param-value>
	</context-param>

	<!-- Location of Java @Configuration classes that configure the components that makeup this application -->
	<context-param>
    	<param-name>contextConfigLocation</param-name>
    	<param-value>spikes.mikeyp.configuration</param-value>
	</context-param>
	

	<!-- Creates the Spring Container shared by all Servlets and Filters -->
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>

	<!-- Processes application requests -->
	<servlet>
		<servlet-name>spring-thymeleaf</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value></param-value>
		</init-param>
		<load-on-startup>1</load-on-startup>
		<async-supported>true</async-supported>
	</servlet>
		
	<servlet-mapping>
		<servlet-name>spring-thymeleaf</servlet-name>
		<url-pattern>/*</url-pattern>
	</servlet-mapping>

	
	<!-- Ensure UTF-8 encoded pages so that certain characters are displayed and submitted correctly -->
	<filter>
		<filter-name>encodingFilter</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<async-supported>true</async-supported>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>UTF-8</param-value>
		</init-param>
		<init-param>
			<param-name>forceEncoding</param-name>
			<param-value>true</param-value>
		</init-param>
		<init-param>
			<param-name>async-supported</param-name>
			<param-value>true</param-value>
		</init-param>
	</filter>

	<filter-mapping>
		<filter-name>encodingFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	
	
	<!-- Enables support for DELETE and PUT request methods with web browser clients -->
	<filter>
		<filter-name>hiddenHttpMethodFilter</filter-name>
		<filter-class>org.springframework.web.filter.HiddenHttpMethodFilter</filter-class>
		<async-supported>true</async-supported>
	</filter>

	<filter-mapping>
		<filter-name>hiddenHttpMethodFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	
	<!-- Atmosphere -->
	 <servlet>
        <description>AtmosphereServlet</description>
        <servlet-name>AtmosphereServlet</servlet-name>
        <servlet-class>org.atmosphere.cpr.AtmosphereServlet</servlet-class>
        <!-- WebSocket time out
        <init-param>
            <param-name>org.atmosphere.websocket.maxIdleTime</param-name>
            <param-value>10000</param-value>
        </init-param>
        -->
        <!-- For mvn jetty:run 
        <init-param>
            <param-name>com.sun.jersey.config.property.packages</param-name>
            <param-value>mikeyp.spikes.configuration.pubsub</param-value>
        </init-param>-->
         <init-param>
            <param-name>org.atmosphere.websocket.messageContentType</param-name>
            <param-value>application/json</param-value>
        </init-param>
        <init-param>
            <param-name>org.atmosphere.useNative</param-name>
            <param-value>true</param-value>
        </init-param>
        <!-- Uncomment to track message size delivery
        <init-param>
            <param-name>org.atmosphere.cpr.broadcastFilterClasses</param-name>
            <param-value>org.atmosphere.client.TrackMessageSizeFilter</param-value>
        </init-param>
        -->
        <!-- Uncomment to use Redis
        <init-param>
            <param-name>org.atmosphere.cpr.broadcasterClassName</param-name>
            <param-value>org.atmosphere.plugin.org.atmosphere.plugin.redis.RedisBroadcaster</param-value>
        </init-param>
        -->

        <load-on-startup>0</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>AtmosphereServlet</servlet-name>
        <url-pattern>/atmosphere/*</url-pattern>
    </servlet-mapping>
		
</web-app>
